if (r[0] == 1) {
  r[2] = 10550400;
  r[5] = 10551364;
  r[0] = 0;
} else {
  r[2] = 128;
  r[5] = 964;
}

r[3] = 1;
while (r[3] <= r[5]) {
  r[1] = 1;
  while (r[1] <= r[5]) {
    r[2] = r[3] * r[1];
    if (r[2] == r[5]) {
      r[0] += r[3];
    } else {
      r[1]++;
    }
  }
  r[3]++;
}

 0 r[4] += 16; jmp 17 // addi 4 16 4
 1 r[3] = 1 // seti 1 2 3
 2 r[1] = 1 // seti 1 6 1
 3 r[2] = r[3] * r[1] // mulr 3 1 2
 4 r[2] = r[2] == r[5] ? 1 : 0 // eqrr 2 5 2 // if r[2] == r[5] skip inst 6
 5 r[4] = r[2] + r[4]; jmp ... // addr 2 4 4
 6 r[4]++; // addi 4 1 4 // skip inst 7
 7 r[0] += r[3] // addr 3 0 0
 8 r[1]++ // addi 1 1 1
 9 r[2] = r[1] > r[5] ? 1 : 0 // gtrr 1 5 2 // if r[2] > r[5] skip inst 11
10 r[4] += r[2] // addr 4 2 4
11 r[4] = 2; jmp 3 // seti 2 8 4
12 r[3]++ // addi 3 1 3
13 r[2] = r[3] > r[5] ? 1 : 0 // gtrr 3 5 2 // if r[3] > r[5] { return }
14 r[4] += r[2] //addr 2 4 4
15 r[4] = 1; jmp 2 // seti 1 4 4
16 r[4] = 16 * 16; return // mulr 4 4 4
17 r[5] += 2 // addi 5 2 5
18 r[5] = r[5] * r[5] // mulr 5 5 5
19 r[5] = 19 * r[5] // mulr 4 5 5
20 r[5] *= 11 // muli 5 11 5
21 r[2] += 5 // addi 2 5 2
22 r[2] *= 4 // mulr 2 4 2
23 r[2] += 18 // addi 2 18 2
24 r[5] += r[2] // addr 5 2 5
25 r[4] += r[0] // skip return to 0 if r[0] is 1 // addr 4 0 4
26 r[4] = 0; jmp 0 // seti 0 6 4
27 r[2] = 27 // setr 4 8 2
28 r[2] *= 28 // mulr 2 4 2
29 r[2] += 29 // addr 4 2 2
30 r[2] *= 30 // mulr 4 2 2
31 r[2] *= 14 // muli 2 14 2
32 r[2] *= 32 // mulr 2 4 2
33 r[5] += r[2] // addr 5 2 5
34 r[0] = 0 // seti 0 1 0
35 r[4] = 0; jmp 0 // seti 0 5 4